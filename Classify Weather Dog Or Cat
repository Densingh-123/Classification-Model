import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import random
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Flatten, Dense

# 1. Load CSV Data (Update the paths as needed)
x_train = np.loadtxt(r"C:\Users\Densingh\Downloads\Image Classification CNN Keras Dataset-20250605T062627Z-1-001\Image Classification CNN Keras Dataset\input.csv", delimiter=',')
y_train = np.loadtxt(r"C:\Users\Densingh\Downloads\Image Classification CNN Keras Dataset-20250605T062627Z-1-001\Image Classification CNN Keras Dataset\labels.csv", delimiter=',')
x_test = np.loadtxt(r"C:\Users\Densingh\Downloads\Image Classification CNN Keras Dataset-20250605T062627Z-1-001\Image Classification CNN Keras Dataset\input_test.csv", delimiter=',')
y_test = np.loadtxt(r"C:\Users\Densingh\Downloads\Image Classification CNN Keras Dataset-20250605T062627Z-1-001\Image Classification CNN Keras Dataset\labels_test.csv", delimiter=',')

# 2. Reshape and Normalize
x_train = x_train.reshape(len(x_train), 100, 100, 3) / 255.0
x_test = x_test.reshape(len(x_test), 100, 100, 3) / 255.0
y_train = y_train.reshape(len(y_train), 1)
y_test = y_test.reshape(len(y_test), 1)

# 3. Verify shapes
print("x_train shape:", x_train.shape)
print("y_train shape:", y_train.shape)
print("x_test shape:", x_test.shape)
print("y_test shape:", y_test.shape)

# 4. Display a random image by hardcoded label
label_map = {'cat': 1, 'dog': 0}  # Flip if needed
target_label = 'cat'  # Change to 'dog' to see a dog

# Get matching indices
matching_indices = [i for i, label in enumerate(y_test) if label == label_map[target_label]]

if matching_indices:
    idx = random.choice(matching_indices)
    plt.imshow(x_test[idx])
    plt.title(f"Label: {target_label}")
    plt.axis('off')
    plt.show()
else:
    print(f"No images found for label: {target_label}")

# 5. Build the CNN Model
model = Sequential([
    Input(shape=(100, 100, 3)),
    Conv2D(32, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(32, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(64, activation='relu'),
    Dense(1, activation='sigmoid')  # Binary classification
])

# 6. Compile the Model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# 7. Show model summary (optional)
model.summary()

# 8. Train the Model
model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test), batch_size=32)

# 9. Evaluate the Model
loss, accuracy = model.evaluate(x_test, y_test)
print(f"Test Accuracy: {accuracy:.4f}")
